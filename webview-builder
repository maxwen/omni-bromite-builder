#!/usr/bin/env bash

# Unofficial Strict Mode
set -euo pipefail
IFS=$'\n\t'

# User-defined Variables
ARCH_TYPES=('arm' 'arm64' 'x86' 'x64')
ARCH=${ARCH_TYPES[1]}
BROMITE_GIT_URL_UPSTREAM="https://github.com/maxwen/omni-cromite.git"
BROMITE_GIT_URL=${BROMITE_GIT_URL_UPSTREAM:-}
BROMITE_GIT_TAGS=
GN_ARGS=
OUTPUT_DIR=
PATCHES_DIR=
NAME=
NO_BROMITE_PATCHES=
NO_SKIP_PATCHES=
TARGET_TYPES=(
    'system_webview_apk')
TARGET=${TARGET_TYPES[0]}
UBUNTU_INSTALL_BUILD_DEPS=
UPSTREAM=

# Options
opts=(
    "-a, --arch=<arch> | Where <arch> is: $(echo "${ARCH_TYPES[@]}" \
        | sed -E "s/\s/, /g"). Defaults to $ARCH"
    "-b, --cromite-git-url=<url> | Where <url> is a Bromite Git repository. Defaults to $BROMITE_GIT_URL_UPSTREAM"
    "-g, --gn-args=<args> | Where <args> is a string of GN build arguments"
    "-o, --output-dir=<dir> | Where <dir> is a path to save the APK. Defaults to ./out"
    "-p, --patches-dir=<dir> | Where <dir> is a path to a directory containing custom patches"
    "-t, --target=<target> | Where Ninja <target> is: $(echo "${TARGET_TYPES[@]}" \
        | sed -E "s/\s/, /g"). Defaults to $TARGET"
    "-u, --upstream=<commit-hash:=master> | Where <commit-hash> is a long-format git commit. Defaults to master's HEAD. When set, any Chromium tag can be assigned to <revision>"
    "--no-skip-patches | Exit on failed patch attempts"
    "--ubuntu-install-build-deps | Run Chromium's build/install-build-deps-android.sh during fetch-sync"
    "-h, --help | Print help menu")

# Constants
DEFAULTS=('prepare' 'build')
CWD=$(cd "$( dirname "$0" )" && pwd)
BUILD_DIR=$CWD/build

# ENV
PYTHONPATH=${PYTHONPATH:-}

clean () {
    rm -rf "$BUILD_DIR/chromium/src/out"
}

fetch-sync () {
    local hash
    local bromite_dir

    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"

    bromite_dir=cromite

    #rm -rf "$bromite_dir"

    #echo "Fetching cromite"
    #git clone $BROMITE_GIT_URL "$bromite_dir" -q

    # Fetch & Sync Chromium
    #echo "Fetching and Syncing Chromium"

    cd "$BUILD_DIR"

    #mkdir -p chromium
    #cd chromium

    # Partial checkouts not supported, delete and start over (crbug.com/230691)
    #[[ ! -e .gclient ]] || [[ ! -e .gclient_entries ]] || [[ ! -d .cipd ]] \
    #    && rm -rf ../chromium/{*,.g*,.c*} \
    #    && fetch --nohooks --no-history android

    # Enter chromium src root
    #cd src

    # If "apt-get" command detected, use install-build-deps to bootstrap env
    # Also ensure jdk is installed, rather than depend on third_party/jdk
    # Requires root privileges and --ubuntu-install-build-deps flag
    #[[ $(command -v apt-get) ]] \
    #    && [[ $UBUNTU_INSTALL_BUILD_DEPS ]] \
    #    && sudo ./build/install-build-deps-android.sh \
    #    && sudo apt-get -qq install default-jdk

    # Reset tree
    #git clean -fdxq --exclude="out/${ARCH}"

    #echo 'y' | gclient sync --no-history -r "$UPSTREAM"
}

prepare () {
    local bromite_dir
    local bromite_src

    local patchlist_path
    local patchlist
    local patch_status

    bromite_dir=$BUILD_DIR/cromite

    [[ ! -d $BUILD_DIR/chromium/src ]] || [[ ! -d $bromite_dir ]] \
        && fetch-sync

    bromite_src=$([[ -d "$bromite_dir/build" ]] \
        && echo "$bromite_dir/build" \
        || echo "$bromite_dir")

    patchlist_path="$bromite_src/webview_patches_list.txt"

    # Prep Patching
    rm -rf "$BUILD_DIR/patches"

    cp -rf "$bromite_src/patches" \
        "$BUILD_DIR/patches"

    [[ $PATCHES_DIR ]] && [[ -d $PATCHES_DIR ]] \
        && cp -rf "$PATCHES_DIR/." \
            "$BUILD_DIR/patches"

    cd "$BUILD_DIR/chromium/src"

    # Patch List Order
    [[ -e $patchlist_path ]] \
        && patchlist=($(sed -e "/^$/d" -e "s|^|$BUILD_DIR/patches/|g" \
            < "$patchlist_path")) \
        || patchlist=("$BUILD_DIR"/patches/*.patch)

    # Add custom patches to patchlist
    if [[ $PATCHES_DIR ]] && [[ -d $PATCHES_DIR ]]; then
        for patchfile in "$PATCHES_DIR"/*.patch; do
            [[ ! -e "$bromite_src/patches/$(basename "$patchfile")" ]] \
                && patchlist+=("$patchfile")
        done
    fi

    # Apply Patches
    for patchfile in "${patchlist[@]}"; do
        patch_status=$(git apply --whitespace=nowarn --check "$patchfile" \
            &>/dev/null; \
            echo $?)

        [[ $patch_status -gt 0 ]] \
            && [[ ! $NO_SKIP_PATCHES ]] \
            && echo "Skipping, doesn't apply: $(basename "$patchfile")" \
            && continue

        echo "Applying patch: $(basename "$patchfile")"
        git apply --whitespace=nowarn "$patchfile"
    done
}

build () {
    local bromite_dir
    local bromite_src
    local bromite_gn

    local gn_args_bromite
    local gn_args_user_arr
    local gn_args

    local output_apk_basename
    local apk_basename

    [[ ! -d $BUILD_DIR/chromium/src ]] \
        && fetch-sync \
        && prepare

    bromite_dir=$BUILD_DIR/cromite

    bromite_src=$([[ -d "$bromite_dir/build" ]] \
        && echo "$bromite_dir/build" \
        || echo "$bromite_dir")

    cd "$BUILD_DIR/chromium/src"
    export CHROMIUM_OUTPUT_DIR="out/${ARCH}"
    mkdir -p "$CHROMIUM_OUTPUT_DIR"

    # Build
    gn gen --args="target_os = \"android\" $(cat $bromite_src/webview.gn_args) target_cpu = \"$ARCH\" " $CHROMIUM_OUTPUT_DIR
    autoninja -C "$CHROMIUM_OUTPUT_DIR" ${TARGET_TYPES[0]}

    # TODO must sign SystemWebView.apk
    [[ -n "$OUTPUT_DIR" ]] \
        && mkdir -p "$OUTPUT_DIR" \
        && cp -f "$CHROMIUM_OUTPUT_DIR/apks/SystemWebView.apk" "$OUTPUT_DIR"

}

_setopts () {
    # Cast args to array for easier parsing
    local args_arr=()

    for arg in $*; do
        [[ ! $arg =~ (--[a-z|-]+)= ]] \
            && args_arr+=("$arg") \
            && continue

        local arg_key
        local arg_value

        arg_key=$(echo "$arg" | sed -E 's/=.+//')
        arg_value=$(echo "$arg" | sed -E "s/$arg_key=//")

        args_arr+=("$arg_key")
        args_arr+=("$arg_value")
    done;

    # Iterate options and assign var values to CLI args
    for opt in "${opts[@]}"; do
        [[ $opt =~ '-h, --help' ]] \
            && continue

        local opt_arr=($(echo "$opt" \
            | sed -E "s/\s*\|.+//g" \
            | sed -E "s/=<.+>//g" \
            | tr ", " "\n"))

        [[ ${#opt_arr[@]} != 2 ]] \
            && opt_arr+=("${opt_arr[0]}")

        local opt_var
        local opt_var_types
        local arg_next
        local idx=0

        opt_var=$(echo "${opt_arr[1]}" \
            | sed -E "s/^--//g" \
            | sed -E "s/\W/_/g" \
            | tr '[a-z]' '[A-Z]')

        opt_var_types=${opt_var}_TYPES[@]

        for arg in "${args_arr[@]}"; do
            case $arg in
                ${opt_arr[0]}|${opt_arr[1]})
                    arg_next=${args_arr[$idx + 1]:-}

                    # Boolean opts
                    [[ ! $opt =~ \=\<.+\> ]] \
                        && export "$opt_var=1" \
                        && continue

                    # Flags that need to fallback to default values
                    [[ $opt =~ \=\<.+:\=.+\> ]] \
                            && [[ ${arg_next::1} == '-' || ! $arg_next ]] \
                        && export "$opt_var=$(echo "$opt" \
                            | sed -E "s/.+\<.+:\=([^\>]+).+/\1/")" \
                        && continue

                    # Flags with custom or type-specific values
                    [[ ! ${!opt_var_types:-} ]] \
                            || [[ $(printf "%s\n" ${!opt_var_types} \
                                | grep -n "^${args_arr[$idx + 1]}$") ]] \
                        && export "$opt_var=${args_arr[$idx + 1]}"
                    ;;
            esac

            idx=$(( "$idx" + 1 ))
        done
    done
}

_localpatches () {
    local patches_dir_msg
    local patches_dir_abspath
    local patches_dirname

    # No patches directory set, return
    [[ ! $PATCHES_DIR ]] \
        && return

    patches_dir_msg="Patches directory \"$PATCHES_DIR\" not found. Skipping"

    # Patches directory absolute path and exists, return
    if [[ $PATCHES_DIR = /* ]]; then
        [[ ! -d $PATCHES_DIR ]] \
            && echo "$patches_dir_msg" \
            && export PATCHES_DIR=
        return
    fi

    # Patches directory relative, update to absolute
    patches_dir_abspath=$(cd "$( dirname "$PATCHES_DIR" )" && pwd)
    patches_dirname=$(basename $PATCHES_DIR)

    [[ ! -d "$patches_dir_abspath/$patches_dirname" ]] \
        && echo "$patches_dir_msg" \
        && export PATCHES_DIR= \
        && return

    export PATCHES_DIR="$patches_dir_abspath/$patches_dirname"
}

_localbin () {
    local protobuf_repo
    local protoc_javalite_bin

    mkdir -p "$CWD/.bin"

    # Depot Tools
    [[ ! -d $CWD/.bin/depot_tools ]] \
        && cd "$CWD/.bin" \
        && echo "Fetching Depot Tools" \
        && git clone -q https://chromium.googlesource.com/chromium/tools/depot_tools.git

    cd "$CWD/.bin/depot_tools"
    git checkout main -q
    git pull -q

    # Update PATH
    export PATH=$CWD/.bin:$CWD/.bin/depot_tools:$PATH
    export PYTHONPATH="$CWD/.bin/depot_tools/third_party:$PYTHONPATH"
}

_getcmds () {
    echo $(typeset -f \
        | awk '/ \(\) $/ && !/^(main) / {print $1}' \
        | sed -E "s/(_.+\s*)//g")
}

_help () {
cat <<HEREDOC
Usage: ${0} [command...] [options...]

Where optional [command] is one of:
  $(_getcmds | sed -E "s/\s/, /g")

If no [command] is set, the default command sequence will be executed:
$(printf "  - %s\n" "${DEFAULTS[@]}")

Options:$(printf "\n  %s\n" "${opts[@]}" \
    | sed -E "s/(\<.+):\=[^\>]*(>)/\1\2/g" \
    | sed -E "s/\s\|\s/\n    /g" \
    | sed -E "s/\.\s/.\n    /g")

HEREDOC
}

main () {
    # Help Menu
    [[ $(echo "$@") == -h ]] || [[ $(echo "$@") == --help ]] \
        && _help \
        && return

    # Set Options
    _setopts "$@"

    # Setup custom patches dir
    _localpatches

    # Setup Local bin
    _localbin

    # No command detected, run default sequence
    for cmd in "${DEFAULTS[@]}"; do
        eval "$cmd"
    done
}

# Entry Function
main "$@"
